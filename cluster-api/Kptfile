apiVersion: kpt.dev/v1
kind: Kptfile
metadata:
  name: cluster-api
pipeline:
  mutators:
  - name: normalize-feature-gates-flag
    image: gcr.io/kpt-fn/search-replace:unstable
    configMap:
      by-value-regex: '--feature-gates=.*'
      put-value: '--feature-gates=MachinePool=false,ClusterResourceSet=false'
  - name: normalize-enable-leader-election-flag
    image: gcr.io/kpt-fn/search-replace:unstable
    configMap:
      by-value: '--enable-leader-election'
      put-value: '--enable-leader-election=true'
  - name: create-setters-for-capi-provider-namespaces
    image: gcr.io/kpt-fn/search-replace:unstable
    configMap:
      by-value-regex: '(.*)(cabpt-system|cacppt-system|capd-system|capi-kubeadm-bootstrap-system|capi-kubeadm-control-plane-system|capi-system|sidero-system)(.*)'
      put-comment: 'kpt-set: ${1}${capi-provider-namespace}${3}'
  - name: create-setters-for-capi-webhook-system-namespace
    image: gcr.io/kpt-fn/search-replace:unstable
    configMap:
      by-value-regex: '(.*)(capi-webhook-system)(.*)'
      put-comment: 'kpt-set: ${1}${capi-webhook-system-namespace}${3}'
  - name: create-setters-for-all-flags
    image: gcr.io/kpt-fn/search-replace:unstable
    configMap:
      by-value-regex: '--([\w-]*)=(.*)'
      put-comment: 'kpt-set: --${1}=${${1}}'
  - name: set-cert-manager-dependencies
    image: gcr.io/kpt-fn/set-annotations:unstable
    configMap:
      config.kubernetes.io/depends-on: apps/namespaces/cert-manager/Deployment/cert-manager-webhook
    selectors:
    - kind: Certificate
    - kind: Issuer
    - namespace: capi-webhook-system
      kind: Deployment
  - name: remove-caBundle-placeholders
    image: gcr.io/kpt-fn/starlark:unstable
    configMap:
      source: |
        def removecabundles(resources):
          for resource in resources:
            webhooks = resource.get("webhooks")
            if not webhooks:
              continue

            print("removecabundles is processing resource", resource["kind"], resource["metadata"]["name"])
            for webhook in webhooks:
              if not webhook.get("clientConfig"):
                continue
              if not webhook["clientConfig"].get("caBundle"):
                continue

              print("removecabundles is processing webhook", webhook["name"])

              webhook["clientConfig"].pop("caBundle")

          for resource in resources:
            spec = resource.get("spec")
            if not spec:
              continue

            conversion = spec.get("conversion")
            if not conversion:
              continue

            webhook = conversion.get("webhook")
            if not webhook:
              continue

            clientConfig = webhook.get("clientConfig")
            if not clientConfig:
              continue

            clientConfig.pop("caBundle", "noexist")

        removecabundles(ctx.resource_list["items"])
  - name: add-port-protocol
    image: gcr.io/kpt-fn/starlark:unstable
    configMap:
      source: |
        def addportprotocol(resources):
          for resource in resources:
            spec = resource.get("spec")
            if not spec:
              continue

            ports = spec.get("ports")
            if not ports:
              continue

            for port in ports:
              port.setdefault("protocol", "TCP")

        addportprotocol(ctx.resource_list["items"])
